import azure.functions as func
import logging
import openai
import os
import json
from llama_index import PromptHelper, StringIterableReader, LLMPredictor, ServiceContext, GPTTreeIndex
from langchain.chat_models import ChatOpenAI

from Utilities.URLScraper import url_scraper
from Utilities.FileReader import file_reader

app = func.FunctionApp(http_auth_level=func.AuthLevel.ANONYMOUS)

prompts = {
  "article": {
    "system": """You are an agent that generates a Marketing Content Post.""",
    "user": """
      Generate a persuasive Marketing Content Post in relation to the data provided.
      Do not use emoticons.
      The Marketing Content should be in the selected language and should have a title, an introductory paragraph, the main content and closing paragraph.
      Return the response in JSON format, in the selected language and always include "\\n", "\n\n" and any other related new line characters for newlines.
      The content should be generated by the messaging objective of each selected audience partner. 
      Please see below the dictionary for the messaging object of each audience partner:
      
      1. Prospective Partners: Awareness and education, including the benefits of purchasing the product or offering and how this is a benefit.,
      2. Current Partners: Awareness and education, focusing on the benefits of purchasing the product or offering.,
      3. Current Competency Partners: Awareness and education, focusing on how purchasing the product or offering can bolster their existing benefits.
      
      Language
      {language}

      Partner Audience
      {partner_audience}

      RESPONSE FORMAT
      {{
        "title": [TITLE],
        "introduction": [INTRODUCTION],
        "body": [MAIN CONTENT],
        "conclusion": [CLOSING PARAGRAPH]
      }}
    """
  },
  "email": {
    "system": """You are an agent that generates a Marketing Content Post in an email format.""",
    "user": """
      Generate a persuasive Marketing Content Post in relation to the data provided.
      The Marketing Content should be in the selected language and should have a subject and a body.
      Do not use emoticons.
      Return the response in JSON format, in the selected language and always include "\\n", "\n\n" and any other related new line characters for newlines.
      The content should be generated by the messaging objective of each selected audience partner. 
      Please see below the dictionary for the messaging object of each audience partner:
      
      1. Prospective Partners: Awareness and education, including the benefits of purchasing the product or offering and how this is a benefit.,
      2. Current Partners: Awareness and education, focusing on the benefits of purchasing the product or offering.,
      3. Current Competency Partners: Awareness and education, focusing on how purchasing the product or offering can bolster their existing benefits.

      Language
      {language}

      Partner Audience
      {partner_audience}

      RESPONSE FORMAT
      {{
        "subject": [SUBJECT],
        "body": [BODY]
      }}
    """
  }
}

@app.route(route="marketing_content", methods=['POST', 'GET'])
def marketing_content(req: func.HttpRequest) -> func.HttpResponse:
  logging.info('Python HTTP trigger function processed a request.')

  try:
    req_body = req.get_json()
    url = req_body.get('url')
    logging.info(f'URL: {url}')
    text_body = url_scraper(url)
  except ValueError:
    req_body = None

  if req_body is None or not req_body:
    try:
      form_data_files = req.files
      form_data_form = req.form
      if form_data_files and form_data_form:

        json_data = form_data_form['req_body']
        req_body = json.loads(json_data)

        text_body = file_reader(form_data_files)

        if text_body == None:
          return func.HttpResponse(
            "Unsupported file",
            status_code = 400
          )
      else:
        return func.HttpResponse(
          "No JSON body and no file found in the request.",
          status_code = 400
        )
    except Exception as e:  
      return func.HttpResponse(  
          f"Error processing the form data: {str(e)}",  
          status_code=400  
      )

  # User Parameters
  format = req_body.get('format')
  language = req_body.get('language')
  partner_audience = req_body.get('partner_audience')
  articleTitleInstruction = req_body.get('articleTitleInstruction')
  articleIntroductionInstruction = req_body.get('articleIntroductionInstruction')
  articleContentInstruction = req_body.get('articleContentInstruction')
  articleConclusionInstruction = req_body.get('articleConclusionInstruction')
  emailSubjectInstruction = req_body.get('emailSubjectInstruction')
  emailBodyInstruction = req_body.get('emailBodyInstruction')
  audienceInstruction = req_body.get('audienceInstruction')

  logging.info(f"INPUT PARAMETERS:")
  logging.info(f"Format: {format}")
  logging.info(f"Language: {language}")
  logging.info(f"Partner Audience: {partner_audience}")

  openai.api_key = str(os.getenv("OPENAI_API_KEY"))
  os.environ['OPENAI_API_KEY'] = str(os.getenv("OPENAI_API_KEY"))
  openai.api_base = str(os.getenv("OPENAI_API_BASE"))
  openai.api_type = str(os.getenv("OPENAI_API_TYPE"))
  openai.api_version = str(os.getenv("OPENAI_API_VERSION"))
  openai_deploymentname = str(os.getenv("OPENAI_DEPLOYMENT_NAME"))

  if articleTitleInstruction != "":
      prompts["article"]["user"] += f"\n\nTitle Instruction: {articleTitleInstruction}\n\n"
  if articleIntroductionInstruction != "":
      prompts["article"]["user"] += f"\n\nIntroduction Instruction: {articleIntroductionInstruction}\n\n"
  if articleContentInstruction != "":
      prompts["article"]["user"] += f"\n\nBody Instruction: {articleContentInstruction}\n\n"
  if articleConclusionInstruction != "":
      prompts["article"]["user"] += f"\n\nConclusion Instruction: {articleConclusionInstruction}\n\n"
  if emailSubjectInstruction != "":
      prompts["email"]["user"] += f"\n\nSubject Instruction: {emailSubjectInstruction}\n\n"
  if emailBodyInstruction != "":
      prompts["email"]["user"] += f"\n\nBody Instruction: {emailBodyInstruction}\n\n"
  if audienceInstruction != "":
      prompts["article"]["user"] += f"\n\nAudience Instruction: {audienceInstruction}\n\n"
      prompts["email"]["user"] += f"\n\nAudience Instruction: {audienceInstruction}\n\n"

  logging.info(f"Building the OpenAI prompt");
  prompt_helper = PromptHelper(chunk_size_limit=2048, num_output=1024, chunk_overlap_ratio=0.2)
  documentsAllContext = StringIterableReader().load_data(texts=[text_body])
  llm_predictor = LLMPredictor(llm=ChatOpenAI(temperature=0.1, model_kwargs={'engine':openai_deploymentname}, request_timeout=30))
  service_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, prompt_helper=prompt_helper)
  index = GPTTreeIndex.from_documents(documentsAllContext, service_context=service_context)
  query_engine = index.as_query_engine(response_mode="tree_summarize")

  logging.info(f"Generating OpenAI response");
  response = query_engine.query(prompts[format]["user"].format(language=language, partner_audience=partner_audience))
  
  logging.info("OPENAI RESPONSE:")
  logging.info(response)

  return func.HttpResponse(body=json.dumps(response.response), status_code=200, mimetype="application/json")